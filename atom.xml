<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[λの花]]></title>
  <link href="http://ncollins.github.io/atom.xml" rel="self"/>
  <link href="http://ncollins.github.io/"/>
  <updated>2013-07-15T15:59:23-04:00</updated>
  <id>http://ncollins.github.io/</id>
  <author>
    <name><![CDATA[Nick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Literate Racket]]></title>
    <link href="http://ncollins.github.io/blog/2013/07/15/literate-racket/"/>
    <updated>2013-07-15T16:00:00-04:00</updated>
    <id>http://ncollins.github.io/blog/2013/07/15/literate-racket</id>
    <content type="html"><![CDATA[<p>I started messing around with literate programming in Racket recently using
the <a href="http://docs.racket-lang.org/scribble/">Scribble</a> tool. I had a little
trouble getting the basic example working, because you need a base
Scribble document in addition to the literate program file:</p>

<figure class='code'><figcaption><span>Base Scribble Document</span><a href='https://github.com/ncollins/literate-fizzbuzz/blob/gh-pages/index.scrbl'>index.scrbl</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang scribble/base</span>
</span><span class='line'>
</span><span class='line'><span class="nv">@</span><span class="p">(</span><span class="k">require </span><span class="nv">scribble/lp-include</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">@title</span><span class="p">{</span><span class="nf">Fizzbuzz</span> <span class="nv">in</span> <span class="nv">Literate</span> <span class="nv">Racket</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">@</span><span class="p">(</span><span class="nf">lp-include</span> <span class="s">&quot;fizzbuzz.scrbl&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this template is set up the main program can be written in
<code>fizzbuzz.scrbl</code>:</p>

<figure class='code'><figcaption><span>Main Program</span><a href='https://github.com/ncollins/literate-fizzbuzz/blob/gh-pages/fizzbuzz.scrbl'>fizzbuzz.scrbl</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang scribble/lp</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to compile with
<a href="http://docs.racket-lang.org/scribble/running.html#%28part._xref-flags%29">cross-reference</a>
links correctly it is necessary to use,
<code>scribble +m --redirect-main http://docs.racket-lang.org/ index.scrbl</code>.
As <code>+m</code> links against local documentation by default <code>--redirect-main</code> is
used to point to the main racket site.</p>

<p>Here&rsquo;s the <a href="http://ncollins.github.io/literate-fizzbuzz/">final output</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cerebral intercourse]]></title>
    <link href="http://ncollins.github.io/blog/2013/06/23/cerebral-intercourse/"/>
    <updated>2013-06-23T12:49:00-04:00</updated>
    <id>http://ncollins.github.io/blog/2013/06/23/cerebral-intercourse</id>
    <content type="html"><![CDATA[<p>One of my first interviews post-Hacker School was with HuffPo Labs, I
particularly enjoyed it because of the off-the-wall programing challenge they
gave me. Many of you will have heard of
<a href="http://en.wikipedia.org/wiki/Brainfuck">brainfuck</a>,
though I doubt as many of you will have actually programed in it. The HuffPo
Labs guys asked me to write a few simple programs in the language and afterwards
I wrote a simple <a href="https://github.com/ncollins/cerebral_intercourse">interpreter</a>.</p>

<p>The rather terse syntax makes reading brainfuck programs difficult, but the
other challenges of programing in the language can easily be explained in a
more familiar format. The Wikipedia article provides a direct translation of
brainfuck to C, but I&rsquo;m going to use a C-like pseudo code in this article.</p>

<h3>Basic operations</h3>


<p>Brainfuck has a &ldquo;tape&rdquo; of data, which we can think of as an array or
linked-list that&rsquo;s infinite in both directions. Like a linked-list we can only
move left or right one cell at a time, we can&rsquo;t &ldquo;jump&rdquo;
to an arbitrary point in the tape. We also have the ability to increment or
or decrement the current byte by 1. Treating the tape as an
array, <code>data[]</code>, indexed by <code>i</code>, the following operations are permited:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="c1">// move the data pointer one to the right</span>
</span><span class='line'><span class="n">i</span><span class="o">--</span><span class="p">;</span> <span class="c1">// move the data pointer one to the left</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increment the value at the data pointer</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span> <span class="c1">// decrement the value at the data pointer</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a result even simple changes to the data require multiple instructions.
It is assumed that we start at <code>i = 0</code>, so to add three to the byte stored at
<code>data[2]</code> we need to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition brainfuck allows us to read a single byte into the current place
in memory, and output the value of the current byte in memory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">()</span>
</span><span class='line'><span class="n">output</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, brainfuck has a single control structure, equivalent to a while loop that runs
while the current data value is non-zero.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Count down</h3>


<p>The &ldquo;hello world&rdquo; of brainfuck takes a single byte as input and counts down
to zero printing each number in turn. This only requires a single data cell
to be used, so we don&rsquo;t need to move the data pointer at all.</p>

<figure class='code'><figcaption><span>Count Down</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Counting up</h3>


<p>Since these loops only terminate when <code>data[i]</code> equals zero, other types of
loops have to be shoehorned into this format. To loop upwards we have to use a
second data cell: <code>data[0]</code> holds the loop variable which we decrement and
<code>data[1]</code> holds a byte which we increment and output.</p>

<figure class='code'><figcaption><span>Count Up</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>If-Else</h3>


<p>This didn&rsquo;t come up in the interview but I felt I should try it on my own as
if-else is a fundamental control structure of most programing languages.
Producing an if-else with arbirary predicates seemed a little too ambitious
so I set myself the following target: Take one number as input, print <code>1</code> if
it&rsquo;s non-zero and <code>0</code> otherwise.</p>

<p>The construction I came up with uses nested while loops and two data bytes.
The &ldquo;equals zero&rdquo; case is simple, if the input is zero then the first while
loop doesn&rsquo;t execute and the default value of zero is return from the second
byte. If the input is non-zero then both while loops
execute, the inner loop reduces <code>data[0]</code> to zero, ensuring that both while
loops terminate, and the outer while loop increments <code>data[1]</code> before terminating.</p>

<p>I&rsquo;ve written it here with named variables, <code>in = data[0]</code> and <code>out = data[1]</code>,
for easy reading:</p>

<figure class='code'><figcaption><span>If-Else (with named variables)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">in</span> <span class="o">=</span> <span class="n">input</span><span class="p">();</span>
</span><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">in</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">in</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">in</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">out</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s then easy to replace <code>in</code>, <code>out</code> with <code>data[i]</code> and intersperse these
with <code>i++</code>s and <code>i--</code>s to move the data pointer back and forth.</p>

<figure class='code'><figcaption><span>If-Else</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">()</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
